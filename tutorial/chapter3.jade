.step(data-title='Sending the reminders', data-file='app/Console/Commands/SendReminders.php', data-highlight='38-56')
  :markdown
    ## Sending the reminders
    In order to message our customers we need to do three things:

      1. Determine which appointments are "due".
      2. Send the appointment reminders.

    Now, we're going to write a scope to achieve the first point and a class to achieve the second. The code will be executed using every minute using [Laravel's scheduler](http://laravel.com/docs/5.1/scheduling#defining-schedules)

.step(data-title='Finding appointments that are due', data-file='app/models/Appointment.php', data-highlight='12-14')
  :markdown
    ## The `appointmentsDue` scope

    We will use this scope to find appointments that must be sent.

    1. Find the current time and add ten minutes to it. This will be the interval of "current" appointments.
    2. Check if the `notificationTime` time falls within the interval.

    As already mentioned, it's important to keep in mind all operations concerning time are done assuming UTC time.

.step(data-title='Sending the reminders', data-file='app/AppointmentReminders/AppointmentReminder.php')
  :markdown
    ## The `AppointmentReminder` class
    The responsibility of the class is sending the remainders through SMS. The logic is as follows:

    1. Iterate over every element in the collection.
    2. Format a message to be sent to the customer as a reminder.
    3. Contact the Twilio API in order to send the messages.

    Since all times stored in the system are stored using `UTC` we first need to use the "Timezone offset" to correct the time so the message contains a time in the customer's own time zone.

.step(data-title='Running the Laravel scheduler' data-file='app/Console/Kernel.php')
  :markdown
    ## Scheduling messages to be sent
    Now that we have all the pieces done and working together it's time to run the Laravel scheduler. Wherever you might be deploying the application needs to run the `php artisan schedule:run` command every minute. This can be done quite easily using cron. But something simple like an infinite shell loop should work just fine (but might not be reliable). The scheduler can be ran manually using `php artisan reminders:send`.